
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module Dyna_test(

	//////////// CLOCK //////////
	CLOCK_50,

	//////////// LED //////////
	LED,

	//////////// KEY //////////
	KEY,

	//////////// SW //////////
	SW 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;

//////////// LED //////////
output		     [7:0]		LED;

//////////// KEY //////////
input 		     [1:0]		KEY;

//////////// SW //////////
input 		     [3:0]		SW;


//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================

logic [2:0] Rw_ad;
logic [31:0] Write_data, Data_useful;
logic rxd, txd, dir, Debug;
logic clk;

assign clk = CLOCK_50;

UART_Dynamixel Thierry(
	// NIOS signals
	.clk(CLOCK_50),
	.reset(~KEY[0]),
	.write_en(1'b1),
	.read_en(1'b0),
	.rw_ad(Rw_ad),
	.write_data(Write_data),
	// exported signals
	.RXD(rxd),
	.TXD(txd), 
	.UART_DIR(dir),
	.debug(Debug),
	.data_useful(Data_useful)
);

	typedef enum logic [1:0] {S0,S1,S2,S3} statetype;
	statetype state, nextstate;
	
// State Register & Bit counter & SPI Register & MISO
	always_ff @(posedge clk) begin
	
		if (~KEY[0])			state <= S0;
		else 							state <= nextstate;
		
	end
	
// Next State Logic

	always_comb begin
	
		// Default value
		nextstate = state;
		Rw_ad = 3'b000; 
		Write_data = 32'h00000000;
		
		case (state)
			S0	:  begin			
						Rw_ad = 3'b101;
						Write_data = 32'he003_04fe;
						nextstate = S1;
					end
			S1 : begin			
					Rw_ad = 3'b110;
					Write_data = 32'h0000_0119;
					nextstate = S2;
					end					
			S2 : begin 			
						Rw_ad = 3'b100;
						Write_data = 32'd1;
						nextstate = S3;
					end
			S3: begin
						Rw_ad = 3'b100;
						Write_data = 32'd0;
						nextstate = S0;
					end
			
			
		endcase
	end
endmodule
